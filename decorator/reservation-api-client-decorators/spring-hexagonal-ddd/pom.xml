<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.3</version>
		<relativePath/>
	</parent>

	<groupId>com.germarna.patterns.decorator.hexagonalddd</groupId>
	<artifactId>rest-client-decorator-example</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>REST Client Decorator Example</name>
	<description>
		A Spring Boot example demonstrating the Decorator Pattern applied to REST clients within a DDD + Hexagonal Architecture project.
	</description>

	<properties>
		<java.version>17</java.version>
		<lombok.version>1.18.38</lombok.version>
		<pitest.junit5.version>1.2.1</pitest.junit5.version>
		<jacoco.version>0.8.12</jacoco.version>
		<maven.surefire.version>3.1.2</maven.surefire.version>
		<maven.failsafe.version>3.1.2</maven.failsafe.version>
		<pitest.maven.version>1.20.1</pitest.maven.version>
	</properties>

	<dependencies>
		<!-- Spring Boot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<!-- Caching & Resilience -->
		<dependency>
			<groupId>io.github.resilience4j</groupId>
			<artifactId>resilience4j-spring-boot3</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.github.ben-manes.caffeine</groupId>
			<artifactId>caffeine</artifactId>
			<version>3.2.0</version>
		</dependency>

		<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- PIT JUnit5 plugin -->
		<dependency>
			<groupId>org.pitest</groupId>
			<artifactId>pitest-junit5-plugin</artifactId>
			<version>${pitest.junit5.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Compiler Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!-- Spring Boot Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- Surefire for Unit Tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.version}</version>
				<configuration>
					<includes>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>

			<!-- Failsafe for Integration Tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven.failsafe.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<includes>
						<include>**/*IT.java</include>
						<include>**/*IntegrationTest.java</include>
					</includes>
				</configuration>
			</plugin>

			<!-- JaCoCo for Code Coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<!-- Agent for unit tests -->
					<execution>
						<id>prepare-agent-ut</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/jacoco-ut.exec</destFile>
						</configuration>
					</execution>

					<!-- Unit test report -->
					<execution>
						<id>report-ut</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
							<excludes>
								<exclude>com/germarna/patterns/decorator/hexagonalddd/ApplicationBoot*</exclude>
								<exclude>com/germarna/patterns/decorator/hexagonalddd/adapter/out/httprest/decorator/**</exclude>
								<exclude>com/germarna/patterns/decorator/hexagonalddd/adapter/in/usecase/decorator/**</exclude>
							</excludes>
						</configuration>
					</execution>

					<!-- Agent for integration tests -->
					<execution>
						<id>prepare-agent-it</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/jacoco-it.exec</destFile>
						</configuration>
					</execution>

					<!-- Integration test report -->
					<execution>
						<id>report-it</id>
						<phase>verify</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-it.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
							<excludes>
								<exclude>com/germarna/patterns/decorator/hexagonalddd/ApplicationBoot*</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- PIT Mutation Testing -->
			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>${pitest.maven.version}</version>
				<configuration>
					<targetClasses>
						<param>com.germarna.patterns.decorator.hexagonalddd.*</param>
					</targetClasses>
					<targetTests>
						<param>com.germarna.patterns.decorator.hexagonalddd.*</param>
					</targetTests>
					<mutators>
						<mutator>STRONGER</mutator>
						<mutator>DEFAULTS</mutator>
						<mutator>-INCREMENTS</mutator>
						<mutator>-VOID_METHOD_CALLS</mutator>
					</mutators>
					<threads>4</threads>
					<outputFormats>
						<param>HTML</param>
						<param>XML</param>
					</outputFormats>
					<failWhenNoMutations>true</failWhenNoMutations>
					<excludedClasses>
						<param>com.germarna.patterns.decorator.hexagonalddd.ApplicationBoot*</param>
						<param>com.germarna.patterns.decorator.hexagonalddd.adapter.in.usecase.decorator.BaseCreateReservationUseCaseDecorator*</param>
						<param>com.germarna.patterns.decorator.hexagonalddd.adapter.in.usecase.decorator.LoggingCreateReservationUseCaseDecorator*</param>
					</excludedClasses>
					<excludedMethods>
						<param>printFailureRate</param>
					</excludedMethods>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
